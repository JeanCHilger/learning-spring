package com.jeanhilger.inventory.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jeanhilger.inventory.model.Item;
import com.jeanhilger.inventory.repository.ItemRepository;

@Controller
@RequestMapping(path="/item")
public class ItemController {
	@Autowired // This means to get the bean called userRepository.
    		   // Which is auto-generated by Spring and will be used to handle data.
	private ItemRepository itemRepository;
	
	// Adds a new Item to Data Bank
	@PostMapping(path="/create")
	public @ResponseBody String addNewItem(@RequestParam(name="id", required=true) Long id,
										   @RequestParam(name="description", required=true) String description,
										   @RequestParam(name="provider", required=true) String provider,
										   @RequestParam(name="value", required=true) double value,
										   @RequestParam(name="quantity", required=true) int quantity) {
		// "@ResponseBody" means the returned value is the response, not a view name.
		// It uses HTTP Message converters to convert the return value to 
		// HTTP response body, based on the content-type in the request HTTP header.

		// "@RequestParam" means it is a parameter of the GET or POST method.
		// The "name" property binds a function parameter to a HTTP request parameter.
		// The "required" property specifies that the parameter is obligatory.
		
		Item item = new Item();
		item.setId(id);
		item.setDescription(description);
		item.setProvider(provider);
		item.setValue(value);
		item.setQuantity(quantity);
		// saves the created object in the db.
		itemRepository.save(item);
		
		return "Saved successfully";
	}
	
	// Returns all items in the Data Bank
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Item> listAllItems() {
		return itemRepository.findAll();
	}
	
	// Returns an specific item
	@GetMapping(path="/details")
	public @ResponseBody Optional<Item> findItemById(@RequestParam(value="id", required=true) Long id) {
		return itemRepository.findById(id);
	}
	
	// Update information about a specific item
	@PostMapping(path="/update")
	public @ResponseBody String updateItem(@RequestParam(name="id", required=true) Long id,
			   							   @RequestParam(name="description", defaultValue="") String newDescription,
										   @RequestParam(name="provider", defaultValue="") String newProvider,
										   @RequestParam(name="value", defaultValue="-1") double newValue,
										   @RequestParam(name="quantity", defaultValue="-1") int newQuantity) {
		// "defaultValue" specifies what value the parameter will have if the 
		// request parameter received is either null or is not provided.
		Item item = itemRepository.findById(id).get();
		if (!newDescription.equals("")) {
			item.setDescription(newDescription);
		}
		
		if (!newProvider.equals("")) {
			item.setProvider(newProvider);
		}
		
		if (newValue != -1) {
			item.setValue(newValue);
		}
		
		if (newQuantity != -1) {
			item.setQuantity(newQuantity);
		}
		
		itemRepository.save(item);
		
		return "Updated Successfully";
	}
	
	// Remove a specific item from db
	@GetMapping(path="/delete")
	public @ResponseBody String deleteItem(@RequestParam(value="id", required=true) Long id) {
		itemRepository.deleteById(id);		
		return "Deleted Successfully";
	}

}
